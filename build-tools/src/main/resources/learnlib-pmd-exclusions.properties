# Copyright (C) 2013-2019 TU Dortmund
# This file is part of LearnLib, http://www.learnlib.de/.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# expected behavior, we simply want to ignore it and re-start searching
de.learnlib.algorithms.adt.config.model.extender.DefaultExtender=EmptyCatchBlock

# we want to establish the contract of a (insertion-) stable set
de.learnlib.algorithms.dhc.mealy.MealyDHC=LooseCoupling
de.learnlib.algorithms.dhc.mealy.MealyDHCState=LooseCoupling

# we don't perform arithmetic operations on Shorts, so usage is fine
de.learnlib.algorithms.kv.StateInfo=AvoidUsingShortType

# we want to store the size of the list before changing it
de.learnlib.algorithms.nlstar.ObservationTable=PrematureDeclaration

# ignore exception
de.learnlib.algorithms.ttt.base.AbstractTTTLearner=EmptyCatchBlock,ExcessiveClassLength

# fine here, because we only receive the delegate logger during instantiation
de.learnlib.api.logging.Slf4jDelegator=LoggerIsNotStaticFinal,MoreThanOneLogger

# we want to store the size of the list before changing it
de.learnlib.datastructure.observationtable.GenericObservationTable=PrematureDeclaration

# RuntimeExceptions are the type of exceptions we allow to handle, therefore we should throw them
de.learnlib.drivers.reflect.ConcreteMethodInput=AvoidThrowingRawExceptionTypes,PreserveStackTrace
de.learnlib.drivers.reflect.SimplePOJODataMapper=AvoidThrowingRawExceptionTypes,PreserveStackTrace

# fine for exampels
de.learnlib.examples.Example1=SystemPrintln
de.learnlib.examples.Example2=SystemPrintln
de.learnlib.examples.Example3=SystemPrintln
de.learnlib.examples.sli.Example1=SystemPrintln
de.learnlib.examples.sli.Example2=SystemPrintln

# we want to allow mapping generic RuntimeExceptions
de.learnlib.mapper.MappedSUL=AvoidCatchingGenericException
de.learnlib.mapper.SULMapperComposition=AvoidCatchingGenericException

# we want to ensure, that we have a random access implementation
de.learnlib.oracle.equivalence.RandomWMethodEQOracle=LooseCoupling
de.learnlib.oracle.equivalence.RandomWpMethodEQOracle=LooseCoupling
